<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jump or Duck</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Bangers&display=swap');
        body {
            font-family: 'Bangers', cursive;
            background-color: #000;
            color: #fff;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            overflow: hidden;
        }

        canvas {
            background-color: #2c3e50;
            border: 4px solid #f39c12;
            border-radius: 12px;
            box-shadow: 0 0 20px rgba(243, 156, 18, 0.6);
            touch-action: none;
        }

        .game-ui {
            background-color: rgba(44, 62, 80, 0.8);
            border: 2px solid #f1c40f;
            backdrop-filter: blur(5px);
        }

        .button {
            transition: transform 0.1s ease-in-out, background-color 0.2s;
        }

        .button:active {
            transform: scale(0.95);
        }
    </style>
</head>
<body>
    <div class="flex flex-col items-center justify-center w-full h-full max-w-2xl p-4">

        <!-- Game Canvas -->
        <canvas id="gameCanvas" class="w-full h-auto aspect-video max-w-full"></canvas>

        <!-- UI for Viewer Commands -->
        <div class="game-ui mt-6 p-4 rounded-xl flex flex-col items-center space-y-4 w-full">
            <h1 class="text-3xl sm:text-4xl text-white text-center tracking-widest leading-none">JUMP OR DUCK</h1>
            
            <div id="gameMessage" class="bg-gray-800 text-yellow-300 text-center text-sm sm:text-base px-4 py-2 rounded-lg w-full min-h-[3rem] flex items-center justify-center">
                Waiting for commands...
            </div>
            
            <div class="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-4 w-full justify-center">
                <button id="jumpBtn" class="button bg-blue-600 hover:bg-blue-500 text-white font-extrabold text-xl sm:text-2xl py-3 rounded-lg shadow-lg w-full max-w-[10rem]">
                    JUMP!
                </button>
                <button id="duckBtn" class="button bg-red-600 hover:bg-red-500 text-white font-extrabold text-xl sm:text-2xl py-3 rounded-lg shadow-lg w-full max-w-[10rem]">
                    DUCK!
                </button>
                <button id="speedBtn" class="button bg-green-600 hover:bg-green-500 text-white font-extrabold text-xl sm:text-2xl py-3 rounded-lg shadow-lg w-full max-w-[10rem]">
                    SPEED!
                </button>
                <button id="slowBtn" class="button bg-purple-600 hover:bg-purple-500 text-white font-extrabold text-xl sm:text-2xl py-3 rounded-lg shadow-lg w-full max-w-[10rem]">
                    SLOW!
                </button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const canvas = document.getElementById('gameCanvas');
            const ctx = canvas.getContext('2d');
            const jumpBtn = document.getElementById('jumpBtn');
            const duckBtn = document.getElementById('duckBtn');
            const speedBtn = document.getElementById('speedBtn');
            const slowBtn = document.getElementById('slowBtn');
            const gameMessage = document.getElementById('gameMessage');

            // Set canvas size based on window dimensions
            const resizeCanvas = () => {
                canvas.width = window.innerWidth > 800 ? 800 : window.innerWidth * 0.9;
                canvas.height = canvas.width / (16/9);
            };

            window.addEventListener('resize', resizeCanvas);
            resizeCanvas();

            // Game variables
            let player = {
                x: 50,
                y: canvas.height - 50,
                width: 40,
                height: 40,
                velocityY: 0,
                isDucking: false,
                isJumping: false
            };

            let obstacles = [];
            let score = 0;
            let gravity = 0.5;
            let jumpStrength = -12;
            let commandCooldown = false;
            let gameStarted = false;
            let gameSpeed = 5;

            // Obstacle properties
            const obstacleWidth = 30;

            // Player actions
            const jump = () => {
                if (!player.isJumping) {
                    player.isJumping = true;
                    player.isDucking = false;
                    player.velocityY = jumpStrength;
                }
            };

            const duck = () => {
                if (!player.isDucking && !player.isJumping) {
                    player.isDucking = true;
                    player.height = 20;
                    player.y = canvas.height - 20;
                    setTimeout(() => {
                        player.isDucking = false;
                        player.height = 40;
                        player.y = canvas.height - 40;
                    }, 500);
                }
            };
            
            // Function to reset the game state
            const resetGame = () => {
                player.x = 50;
                player.y = canvas.height - 50;
                player.velocityY = 0;
                player.isDucking = false;
                player.isJumping = false;
                obstacles = [];
                score = 0;
                gameStarted = false;
                gameSpeed = 5;
                gameMessage.textContent = "Waiting for commands...";
            };


            // Game logic and drawing
            function draw() {
                ctx.clearRect(0, 0, canvas.width, canvas.height);

                // Draw ground
                ctx.fillStyle = '#1abc9c';
                ctx.fillRect(0, canvas.height - 10, canvas.width, 10);

                // Draw player
                ctx.fillStyle = '#f1c40f';
                ctx.fillRect(player.x, player.y, player.width, player.height);

                // Draw obstacles
                obstacles.forEach(obstacle => {
                    if (obstacle.type === 'boost') {
                        ctx.fillStyle = '#3498db'; // Blue for boost
                    } else if (obstacle.type === 'slow') {
                        ctx.fillStyle = '#9b59b6'; // Purple for slow trap
                    } else {
                        ctx.fillStyle = '#c0392b'; // Red for regular obstacles
                    }
                    ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);
                });

                // Draw score
                ctx.fillStyle = '#ecf0f1';
                ctx.font = '24px "Bangers"';
                ctx.textAlign = 'center';
                ctx.fillText(`Score: ${score}`, canvas.width / 2, 30);
            }

            function update() {
                if (!gameStarted) return;

                // Player movement
                player.velocityY += gravity;
                player.y += player.velocityY;

                // Keep player on ground
                if (player.y + player.height > canvas.height - 10) {
                    player.y = canvas.height - 10 - player.height;
                    player.velocityY = 0;
                    player.isJumping = false;
                }

                // Move obstacles
                obstacles.forEach(obstacle => {
                    obstacle.x -= gameSpeed;
                });

                // Collision detection
                obstacles = obstacles.filter(obstacle => {
                    const isColliding = player.x < obstacle.x + obstacle.width &&
                                        player.x + player.width > obstacle.x &&
                                        player.y < obstacle.y + obstacle.height &&
                                        player.y + player.height > obstacle.y;
                    
                    if (isColliding) {
                        if (obstacle.type === 'boost') {
                            gameSpeed = 8;
                            gameMessage.textContent = "Speed Boost!";
                            setTimeout(() => { gameSpeed = 5; gameMessage.textContent = 'Waiting for commands...'; }, 3000);
                            return false; // Remove power-up
                        } else if (obstacle.type === 'slow') {
                            gameSpeed = 2;
                            gameMessage.textContent = "Slow Trap!";
                            setTimeout(() => { gameSpeed = 5; gameMessage.textContent = 'Waiting for commands...'; }, 3000);
                            return false; // Remove trap
                        } else {
                            gameMessage.textContent = "Game Over! Final Score: " + score;
                            gameStarted = false;
                            setTimeout(resetGame, 3000); // Reset after a delay
                            return false; // Remove obstacle
                        }
                    }
                    return obstacle.x + obstacle.width > 0;
                });

                // Generate new obstacles
                if (Math.random() < 0.015) {
                    const obstacleTypeChance = Math.random();
                    let obstacleProps = {};

                    if (obstacleTypeChance < 0.3) {
                        // High obstacle (must duck)
                        obstacleProps = { height: 20, y: canvas.height - 10 - 20 - 50, type: 'high' };
                    } else if (obstacleTypeChance < 0.6) {
                        // Low obstacle (must jump)
                        obstacleProps = { height: 40, y: canvas.height - 10 - 40, type: 'low' };
                    } else if (obstacleTypeChance < 0.8) {
                        // Speed Boost power-up
                        obstacleProps = { height: 30, y: canvas.height - 100, type: 'boost' };
                    } else {
                        // Slow Trap
                        obstacleProps = { height: 30, y: canvas.height - 50, type: 'slow' };
                    }

                    obstacles.push({
                        x: canvas.width,
                        width: obstacleWidth,
                        ...obstacleProps
                    });
                }
                
                score++;
            }

            function gameLoop() {
                update();
                draw();
                requestAnimationFrame(gameLoop);
            }

            // Command buttons logic
            const processCommand = (command) => {
                if (commandCooldown) {
                    return;
                }
                
                if (!gameStarted) {
                    resetGame();
                }
                gameStarted = true;
                commandCooldown = true;
                gameMessage.textContent = `Command received: ${command.toUpperCase()}!`;
                
                if (command === 'jump') {
                    jump();
                } else if (command === 'duck') {
                    duck();
                }

                setTimeout(() => {
                    commandCooldown = false;
                    gameMessage.textContent = 'Waiting for commands...';
                }, 1000);
            };

            jumpBtn.addEventListener('click', () => processCommand('jump'));
            jumpBtn.addEventListener('touchstart', (e) => { e.preventDefault(); processCommand('jump'); });

            duckBtn.addEventListener('click', () => processCommand('duck'));
            duckBtn.addEventListener('touchstart', (e) => { e.preventDefault(); processCommand('duck'); });
            
            speedBtn.addEventListener('click', () => { gameSpeed = 8; gameMessage.textContent = "Speed Boost!"; setTimeout(() => { gameSpeed = 5; gameMessage.textContent = 'Waiting for commands...'; }, 3000); });
            speedBtn.addEventListener('touchstart', (e) => { e.preventDefault(); gameSpeed = 8; gameMessage.textContent = "Speed Boost!"; setTimeout(() => { gameSpeed = 5; gameMessage.textContent = 'Waiting for commands...'; }, 3000); });

            slowBtn.addEventListener('click', () => { gameSpeed = 2; gameMessage.textContent = "Slow Trap!"; setTimeout(() => { gameSpeed = 5; gameMessage.textContent = 'Waiting for commands...'; }, 3000); });
            slowBtn.addEventListener('touchstart', (e) => { e.preventDefault(); gameSpeed = 2; gameMessage.textContent = "Slow Trap!"; setTimeout(() => { gameSpeed = 5; gameMessage.textContent = 'Waiting for commands...'; }, 3000); });

            // Initial call to start the game loop
            gameLoop();
        });
    </script>
</body>
</html>

